syntax = "proto3";

package marketplace;

// Message for seller registration request
message RegisterSellerRequest {
    string ip_port = 1; // IP:Port of the notification server
    string uuid = 2;    // Unique UUID of the seller
}

// Response to seller registration request
message RegisterSellerResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;
}


// Enum for product categories
enum ProductCategory {
    ELECTRONICS = 0;
    FASHION = 1;
    OTHERS = 2;
}

// Message for selling an item request
message SellItemRequest {
    string product_name = 1;            // Product name
    ProductCategory category = 2;       // Product category
    int32 quantity = 3;                 // Quantity available
    string description = 4;             // Description of the product
    string seller_address = 5;          // Seller's address
    string seller_uuid = 6;             // Seller's UUID
    float price_per_unit = 7;           // Price per unit
}

// Response to selling an item request
message SellItemResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;
    string message = 2;
    int32 item_id = 3;                  // Unique ID assigned to the item by the market
}

// Message for UpdateItem request
message UpdateItemRequest {
    int32 item_id = 1;          // Item ID of the item to be updated
    float new_price = 2;        // New price for the item
    int32 new_quantity = 3;     // New quantity for the item
    string seller_address = 4;  // Seller's address
    string seller_uuid = 5;     // Seller's UUID
}

// Response to UpdateItem request
message UpdateItemResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;
    string message = 2;
}

message DeleteItemRequest {
    string seller_address = 1; // Seller's address
    string seller_uuid = 2;    // Seller's UUID
    int32 item_id = 3;         // Item ID to be deleted
}

// Response message for deleting an item
message DeleteItemResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;     // Status of the deletion operation
    string message = 2;    // Additional message describing the result
}


// Message for seller item details
message SellerItem {
    int32 item_id = 1;
    float price = 2;
    string product_name = 3;
    string category = 4;
    string description = 5;
    int32 quantity_remaining = 6;
    string seller_address = 7;
    float rating = 8;
}

// Request message for displaying seller items
message DisplaySellerItemsRequest {
    string seller_address = 1;
    string seller_uuid = 2;
}

// Response message for displaying seller items
message DisplaySellerItemsResponse {
    enum Status {
        SUCCESS = 0;
        FAILED = 1;
    }
    Status status = 1;
    string message = 2;
    repeated SellerItem items = 3;
}
// Define Market service
service Market {
    // RPC method for registering a seller
    rpc RegisterSeller (RegisterSellerRequest) returns (RegisterSellerResponse);
    rpc SellItem (SellItemRequest) returns (SellItemResponse);
    rpc UpdateItem (UpdateItemRequest) returns (UpdateItemResponse);
    rpc DeleteItem (DeleteItemRequest) returns (DeleteItemResponse);
    rpc DisplaySellerItems (DisplaySellerItemsRequest) returns (DisplaySellerItemsResponse);
}
